"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const config_1 = require("hardhat/config");
const os_1 = __importDefault(require("os"));
const const_1 = require("./const");
const docker_1 = require("./docker");
(0, config_1.task)(const_1.TASK_FHENIX_DOCKER_STOP, "Stops a LocalFhenix node").setAction(async () => {
    (0, docker_1.stopLocalFhenix)();
    console.info(chalk_1.default.green("Successfully shut down LocalFhenix"));
});
(0, config_1.subtask)(const_1.SUBTASK_FHENIX_DOCKER_PULL, "Pulls the latest LocalFhenix image")
    .addOptionalParam("image", "Specified docker image to pull", undefined)
    .setAction(async ({ image }) => {
    (0, docker_1.pullDockerContainer)(image);
});
// Main task of the plugin. It starts the server and listens for requests.
(0, config_1.task)(const_1.TASK_FHENIX_DOCKER_START, "Starts a LocalFhenix node")
    .addOptionalParam("rpc", "RPC port to listen on - default: 42069", 42069, config_1.types.int)
    .addOptionalParam("ws", "Websocket port to listen on - default: 42070", 42070, config_1.types.int)
    .addOptionalParam("faucet", "Faucet port to listen on - default: 42000", 42000, config_1.types.int)
    .addOptionalParam("image", `Fhenix image to use`, undefined, config_1.types.string)
    // .addOptionalParam('log', 'Log filter level (error, warn, info, debug) - default: info', undefined, types.string)
    .setAction(async ({ rpc, ws, faucet, image, }, { run }) => {
    if ((0, docker_1.isContainerRunning)(const_1.LOCALFHENIX_CONTAINER_NAME)) {
        console.log(chalk_1.default.yellow(`LocalFhenix container is already running`));
        return;
    }
    if (os_1.default.arch() === "arm64") {
        image = image || const_1.FHENIX_DEFAULT_IMAGE_ARM;
    }
    else {
        image = image || const_1.FHENIX_DEFAULT_IMAGE;
    }
    await run(const_1.SUBTASK_FHENIX_DOCKER_PULL, { image });
    await (0, docker_1.runLocalFhenixSeparateProcess)(rpc, ws, faucet, image);
    console.info(chalk_1.default.green(`Started LocalFhenix successfully at 127.0.0.1:${rpc}`));
});
//# sourceMappingURL=index.js.map