"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockProvider = exports.FhenixHardhatRuntimeEnvironment = void 0;
const fhenixjs_1 = require("fhenixjs");
const common_1 = require("./common");
class FhenixHardhatRuntimeEnvironment extends fhenixjs_1.FhenixClient {
    // TODO remove config
    // move the faucet to a task on the example repo
    // there's no good way to discover the faucet port from here
    constructor(hre, config) {
        let superArgs = {
            ignoreErrors: true,
            provider: new MockProvider(),
        };
        if (hre?.network !== undefined && hre.network.provider) {
            superArgs = {
                ignoreErrors: true,
                provider: hre.network.provider,
            };
        }
        super(superArgs);
        this.hre = hre;
        this.config = config;
    }
    async getFunds(address) {
        await (0, common_1.getFunds)(address, `http://localhost:${this.config.faucetPort}`);
    }
    async createPermit(contractAddress, provider) {
        if (!provider && this.provider === undefined) {
            throw new Error("no provider provided");
        }
        const permit = await (0, fhenixjs_1.getPermit)(contractAddress, provider || this.provider);
        this.storePermit(permit);
        return permit;
    }
    sayHello() {
        return "hello";
    }
}
exports.FhenixHardhatRuntimeEnvironment = FhenixHardhatRuntimeEnvironment;
class MockProvider {
    async send(method, params) {
        return new Promise((resolve, reject) => {
            reject("provider not initialized");
        });
    }
    async getSigner() {
        return new Promise((resolve, reject) => {
            reject("provider not initialized");
        });
    }
}
exports.MockProvider = MockProvider;
//# sourceMappingURL=FhenixHardhatRuntimeEnvironment.js.map